#pragma checksum "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "50d74be4094e9730ffe5ab527b35f8a3646a141b"
// <auto-generated/>
#pragma warning disable 1591
namespace RandomWalk.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using RandomWalk;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\_Imports.razor"
using RandomWalk.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, @"<style>


    .outerdiv div {
        width: 50px;
        height: 50px;
        border: 1px solid black;
        display: inline-block;
        margin: 0;
        padding: 0;
    }

    .grid-container {
        display: grid;
        background-color: #2196F3;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    .grid-item {
        background-color: rgba(255, 255, 255, 0.8);
        border: 1px solid rgba(0, 0, 0, 0.8);
        font-size: 30px;
        text-align: center;
        position: static;
    }
</style>

");
            __builder.OpenElement(1, "body");
            __builder.AddMarkupContent(2, "\r\n\r\n    ");
            __builder.OpenElement(3, "div");
            __builder.AddAttribute(4, "class", "grid-container");
            __builder.AddAttribute(5, "tabindex", "0");
            __builder.AddAttribute(6, "style", "grid-template-columns:" + " " + (
#nullable restore
#line 39 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"
                                         Multiply("auto ", size)

#line default
#line hidden
#nullable disable
            ) + ";");
            __builder.AddAttribute(7, "onmousewheel", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.WheelEventArgs>(this, 
#nullable restore
#line 40 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"
                        ChangeSize

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(8, "onkeypress", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>(this, 
#nullable restore
#line 41 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"
                      ChangeNumPaths

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(9, "\r\n");
#nullable restore
#line 42 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"
         for (int i = 0; i < size; i++)
        {
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"
             for (int j = 0; j < size; j++)
            {

#line default
#line hidden
#nullable disable
            __builder.AddContent(10, "                ");
            __builder.OpenElement(11, "div");
            __builder.AddAttribute(12, "class", "grid-item");
            __builder.AddAttribute(13, "style", "background-color:" + " " + (
#nullable restore
#line 47 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"
                                                   GetColour(i,j)

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(14, "\r\n                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(15, "\r\n");
#nullable restore
#line 49 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"


            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 51 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"
             
        }

#line default
#line hidden
#nullable disable
            __builder.AddContent(16, "    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(17, "\r\n");
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 59 "C:\Users\owenp\Git Hub Repositories\RandomWalk\RandomWalk\Pages\Index.razor"
      

    readonly Dictionary<int, string> Colours = new Dictionary<int, string>
    {
        {0,"#990099"},
        {1,"#e64500"},
        {2,"#f7d80f"},
        {3,"#00cf11"},
        {4,"#0080cf"}
    };

    List<int[][]> paths = new List<int[][]>
    {
        new int[][]{
            new int[]{0,0},
            new int[]{0,0},
            new int[]{0,0},
            new int[]{0,0},
            new int[]{0,0},
        },
        new int[][]{
            new int[]{5,5},
            new int[]{5,4},
            new int[]{5,3},
            new int[]{5,2},
            new int[]{5,1},
        },
    };


    int size = 10;

    Random random = new Random((int)(DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond) % 100000);

    private void ChangeSize(WheelEventArgs e)
    {
        size = Math.Clamp(size + ((int)e.DeltaY / 10), 5, 100);

    }

    private void ChangeNumPaths(KeyboardEventArgs e)
    {
        switch(e.Key)
        {
            case "1":
                paths = new List<int[][]>
                { new int[][]{
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0}} };
                break;
            case "2":
                paths = new List<int[][]>
                { new int[][]{
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0}},
                    new int[][]{
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1}} };
                break;
            case "3":
                paths = new List<int[][]>
                { new int[][]{
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0}},
                    new int[][]{
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1}},
                    new int[][]{
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2}} };
                break;

            case "4":
                paths = new List<int[][]>
                { new int[][]{
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0}},
                    new int[][]{
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1}},
                    new int[][]{
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2}},
                    new int[][]{
                    new int[]{3,3},
                    new int[]{3,3},
                    new int[]{3,3},
                    new int[]{3,3},
                    new int[]{3,3}} };
                break;


            case "5":
                paths = new List<int[][]>
                { new int[][]{
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0},
                    new int[]{0,0}},
                    new int[][]{
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1},
                    new int[]{1,1}},
                    new int[][]{
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2},
                    new int[]{2,2}},
                    new int[][]{
                    new int[]{3,3},
                    new int[]{3,3},
                    new int[]{3,3},
                    new int[]{3,3},
                    new int[]{3,3}},
                    new int[][]{
                    new int[]{4,4},
                    new int[]{4,4},
                    new int[]{4,4},
                    new int[]{4,4},
                    new int[]{4,4}} };
                break;


        }
    }

    [JSInvokable("Move")]
    public void Move()
    {
        for(int i = 0; i < paths.Count(); i++)
        {
            MovePath(i);
        }

        this.StateHasChanged();
    }

    private void MovePath(int k)
    {
        for (int i = paths[k].Length - 1; i > 0; i--)
        {
            paths[k][i][0] = paths[k][i - 1][0];
            paths[k][i][1] = paths[k][i - 1][1];
        }

        List<int[]> possibleMoves = new List<int[]>();

        if (paths[k][0][0] != 0)
        {
            possibleMoves.Add(new int[] { -1, 0 });
        }
        if (paths[k][0][0] != size - 1)
        {
            possibleMoves.Add(new int[] { 1, 0 });
        }
        if (paths[k][0][1] != 0)
        {
            possibleMoves.Add(new int[] { 0, -1 });
        }
        if (paths[k][0][1] != size - 1)
        {
            possibleMoves.Add(new int[] { 0, 1 });
        }

        int[] Move = possibleMoves[random.Next(0, possibleMoves.Count())];
        paths[k][0][0] += Move[0];
        paths[k][0][1] += Move[1];

        var a = possibleMoves.Count();
    }



    private string GetColour(int y, int x)
    {
        for (int i = 0; i < paths.Count(); i++)
        {
            for (int j = 0; j < paths[i].Length; j++)
            {
                if (y == paths[i][j][0] && x == paths[i][j][1])
                {
                    string transparency = (15 - 2 * j).ToString("X");
                    string colour = Colours[i] + transparency + transparency;
                    return colour;
                }
            }
        }
        return "";
    }


    public static string Multiply(string source, int multiplier)
    {
        string output = "";
        for (int i = 0; i < multiplier; i++)
        {
            output += source;
        }
        return output;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("jsTimer", dotNetReference);
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
